import psycopg2
import argparse
import matplotlib.pyplot as plt
import seaborn as sns
import os
import numpy as np
import textwrap
from matplotlib.ticker import FuncFormatter
import calendar
from datetime import datetime
import matplotlib.ticker as mtick

def conectar():
    return psycopg2.connect(
        host="localhost",
        password="5540",
        port="5432",
        database="postgres",
        user="postgres"
    )

def ventas_por_mes(conn, anio):
    query = """
    SELECT TO_CHAR(hv.fecha_venta, 'YYYY-MM') AS anomes,
           COUNT(*) AS count
    FROM analisis.hechos_ventas hv 
    WHERE TO_CHAR(hv.fecha_venta, 'YYYY') = %s
    GROUP BY TO_CHAR(hv.fecha_venta, 'YYYY-MM')
    ORDER BY anomes;
    """
    with conn.cursor() as cursor:
        cursor.execute(query, (anio,))
        resultados = cursor.fetchall()

    # Mostrar en consola
    print(f"\n=== VENTAS POR MES - {anio} ===")
    if not resultados:
        print(f"‚ùå No se encontraron ventas para el a√±o {anio}")
        
        # Consulta de diagn√≥stico
        debug_query = """
        SELECT TO_CHAR(hv.fecha_venta, 'YYYY') as a√±o, COUNT(*) as total_ventas
        FROM analisis.hechos_ventas hv
        GROUP BY TO_CHAR(hv.fecha_venta, 'YYYY')
        ORDER BY a√±o;
        """
        cursor.execute(debug_query)
        a√±os_disponibles = cursor.fetchall()
        
        if a√±os_disponibles:
            print("A√±os disponibles en la base de datos:")
            for a√±o, total in a√±os_disponibles:
                print(f"  - {a√±o}: {total} ventas")
        else:
            print("‚ùå No hay datos de ventas en la tabla analisis.hechos_ventas")
        
        return []
    
    for anomes, count in resultados:
        print(f"{anomes}: {count}")

    # Si hay resultados, generar gr√°fico
    if resultados:
        anomes_raw = [r[0] for r in resultados]
        cantidad = [r[1] for r in resultados]

        # Convertir "YYYY-MM" a "Mes A√±o"
        anomes = []
        for fecha in anomes_raw:
            try:
                dt = datetime.strptime(fecha, "%Y-%m")
                nombre_mes = calendar.month_name[dt.month].capitalize()
                anomes.append(f"{nombre_mes} {dt.year}")
            except:
                anomes.append(fecha)  # fallback si algo falla

        plt.figure(figsize=(12, 6))
        sns.barplot(x=list(range(len(anomes))), y=cantidad, palette="Blues_d")

        plt.title(f'Ventas por mes - {anio}', fontsize=14, fontweight='bold')
        plt.xticks(range(len(anomes)), anomes, rotation=45)
        plt.ylabel('Cantidad de ventas')
        plt.xlabel('Mes')
        
        # Agregar valores en las barras
        for i, v in enumerate(cantidad):
            plt.text(i, v + max(cantidad) * 0.01, str(v), ha='center', va='bottom', fontweight='bold')
        
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()

        # Crear carpeta si no existe
        output_dir = "graficos"
        os.makedirs(output_dir, exist_ok=True)
        filename = f"{output_dir}/ventas_por_mes_{anio}.png"

        try:
            plt.savefig(filename, dpi=300, bbox_inches='tight')
            print(f"\n‚úÖ Gr√°fico guardado como: {filename}")
            print(f"üìÅ Ubicaci√≥n: {os.path.abspath(filename)}")
        except Exception as e:
            print(f"‚ùå Error al guardar el gr√°fico: {e}")

        plt.show()
        plt.close()
    else:
        print("\n‚ùå No se encontraron resultados para ese a√±o.")

    return resultados

def compras_ventas_diferencia(conn, anio):
    query = """
    SELECT COALESCE(compraAnomes, VentaAnomes) AS anomes,
           COALESCE(ventasmes.monto_ventas, 0) AS monto_ventas,
           COALESCE(comprames.monto_compras, 0) AS monto_compras,
           COALESCE(ventasmes.monto_ventas, 0) - COALESCE(comprames.monto_compras, 0) AS diferencia
    FROM 
    (
        SELECT TO_CHAR(hc.fecha_compra, 'YYYY-MM') AS compraAnomes,
               SUM(hc.monto) AS monto_compras
        FROM analisis."Hechos_compras" hc
        WHERE TO_CHAR(hc.fecha_compra, 'YYYY') = %s
        GROUP BY compraAnomes
        ORDER BY compraAnomes
    ) AS comprames
    FULL JOIN
    (
        SELECT TO_CHAR(hv.fecha_venta, 'YYYY-MM') AS VentaAnomes,
               SUM(hv.monto) AS monto_ventas
        FROM analisis.hechos_ventas hv
        WHERE TO_CHAR(hv.fecha_venta, 'YYYY') = %s
        GROUP BY VentaAnomes
        ORDER BY VentaAnomes
    ) AS ventasmes
    ON comprames.compraanomes = ventasmes.VentaAnomes;
    """
    
    with conn.cursor() as cursor:
        cursor.execute(query, (anio, anio))
        datos = cursor.fetchall()
    
    # Procesar los datos
    meses_raw = [fila[0] for fila in datos]
    ventas = [fila[1] for fila in datos]
    compras = [fila[2] for fila in datos]
    diferencias = [fila[3] for fila in datos]

    # Formatear los nombres de los meses
    meses = []
    for m in meses_raw:
        try:
            dt = datetime.strptime(m, "%Y-%m")
            meses.append(f"{calendar.month_name[dt.month]} {dt.year}")
        except:
            meses.append(m)

    # ---------- GR√ÅFICO DE BARRAS AGRUPADAS ----------
    x = np.arange(len(meses))
    ancho = 0.25

    plt.figure(figsize=(14, 6))
    plt.bar(x - ancho, ventas, width=ancho, label='Ventas', color='green')
    plt.bar(x, compras, width=ancho, label='Compras', color='blue')
    plt.bar(x + ancho, diferencias, width=ancho, label='Diferencia', color='red')

    plt.title(f'Comparaci√≥n mensual de Compras, Ventas y Diferencia - {anio}')
    plt.xlabel('Mes')
    plt.ylabel('Monto (CLP)')
    plt.xticks(x, meses, rotation=45)
    plt.legend()
    plt.grid(axis='y')

    # Formatear el eje Y como CLP with separador de miles
    formatter = mtick.FuncFormatter(lambda x, _: f"{int(x):,} CLP".replace(",", "."))
    plt.gca().yaxis.set_major_formatter(formatter)

    plt.tight_layout()

    # Crear carpeta si no existe
    output_dir = "graficos"
    os.makedirs(output_dir, exist_ok=True)
    filename = f"{output_dir}/comparacion_barras_{anio}.png"
    plt.savefig(filename)
    plt.show()

    return datos
    
def top_10_modelos_mas_vendidos(conn, anio):
    query = """
    SELECT m.nombre_modelo,
           COUNT(*) AS cantidad_vendida
    FROM analisis.hechos_ventas hv
    JOIN analisis.modelos m ON hv.id_modelo = m.id_modelo
    WHERE TO_CHAR(hv.fecha_venta, 'YYYY') = %s
    GROUP BY m.nombre_modelo
    ORDER BY cantidad_vendida DESC
    LIMIT 10;
    """
    with conn.cursor() as cursor:
        cursor.execute(query, (anio,))
        resultados = cursor.fetchall()

    # Mostrar resultados en consola para debugging
    print(f"\n=== TOP 10 MODELOS M√ÅS VENDIDOS - {anio} ===")
    if not resultados:
        print(f"‚ùå No se encontraron ventas para el a√±o {anio}")
        print("Verificando datos disponibles...")
        
        # Consulta de diagn√≥stico
        debug_query = """
        SELECT TO_CHAR(hv.fecha_venta, 'YYYY') as a√±o, COUNT(*) as total_ventas
        FROM analisis.hechos_ventas hv
        GROUP BY TO_CHAR(hv.fecha_venta, 'YYYY')
        ORDER BY a√±o;
        """
        cursor.execute(debug_query)
        a√±os_disponibles = cursor.fetchall()
        
        if a√±os_disponibles:
            print("A√±os disponibles en la base de datos:")
            for a√±o, total in a√±os_disponibles:
                print(f"  - {a√±o}: {total} ventas")
        else:
            print("‚ùå No hay datos de ventas en la tabla analisis.hechos_ventas")
        
        return []
    
    # Mostrar resultados
    for i, (modelo, cantidad) in enumerate(resultados, 1):
        print(f"{i:2d}. {modelo}: {cantidad} unidades")

    # Extraer datos para el gr√°fico
    modelos = [fila[0] for fila in resultados]
    cantidades = [fila[1] for fila in resultados]

    # Verificar que tenemos datos para graficar
    if not modelos or not cantidades:
        print("‚ùå No hay datos para generar el gr√°fico")
        return resultados

    # Truncar nombres largos de modelos para mejor visualizaci√≥n
    modelos_truncados = [textwrap.fill(modelo, 20) if len(modelo) > 20 else modelo for modelo in modelos]

    # Graficar
    plt.figure(figsize=(12, 8))
    barras = plt.barh(range(len(modelos_truncados)), cantidades, color='skyblue')
    
    # Configurar etiquetas y t√≠tulo
    plt.xlabel('Cantidad de unidades vendidas')
    plt.ylabel('Modelos')
    plt.title(f'Top 10 Modelos m√°s Vendidos - {anio}', fontsize=14, fontweight='bold')
    
    # Configurar etiquetas del eje Y
    plt.yticks(range(len(modelos_truncados)), modelos_truncados)
    plt.gca().invert_yaxis()  # El m√°s vendido arriba

    # Agregar valores en las barras
    for i, barra in enumerate(barras):
        ancho = barra.get_width()
        plt.text(ancho + max(cantidades) * 0.01, barra.get_y() + barra.get_height()/2,
                 str(int(ancho)), va='center', fontweight='bold')

    # Agregar grid para mejor lectura
    plt.grid(axis='x', alpha=0.3)
    
    plt.tight_layout()
    
    # Crear carpeta si no existe
    output_dir = "graficos"
    os.makedirs(output_dir, exist_ok=True)
    filename = f"{output_dir}/top_10_modelos_mas_vendidos_{anio}.png"
    
    try:
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"\n‚úÖ Gr√°fico guardado como: {filename}")
        print(f"üìÅ Ubicaci√≥n: {os.path.abspath(filename)}")
    except Exception as e:
        print(f"‚ùå Error al guardar el gr√°fico: {e}")
    
    plt.show()
    plt.close()

    return resultados


def modelo_mas_vendido_por_region(conn, anio):
    query = """
    SELECT r.nombre_region, ranked.nombre_modelo, ranked.cantidad_vendida
    FROM (
        SELECT hv.id_region,
               m.nombre_modelo,
               COUNT(*) AS cantidad_vendida,
               ROW_NUMBER() OVER (PARTITION BY hv.id_region ORDER BY COUNT(*) DESC) AS fila
        FROM analisis.hechos_ventas hv
        JOIN analisis.modelos m ON hv.id_modelo = m.id_modelo
        WHERE TO_CHAR(hv.fecha_venta, 'YYYY') = %s
        GROUP BY hv.id_region, m.nombre_modelo
    ) ranked
    JOIN analisis.region r ON ranked.id_region = r.id_region
    WHERE ranked.fila = 1;
    """
    with conn.cursor() as cursor:
        cursor.execute(query, (anio,))
        resultados = cursor.fetchall()

    if not resultados:
        print("\nNo se encontraron resultados para ese a√±o en modelo m√°s vendido por regi√≥n.")
        return []

    # Ajustar nombres largos con saltos de l√≠nea y abreviaturas
    def abreviar_region(nombre):
        abreviaturas = {
            'Regi√≥n de Arica y Parinacota': 'Arica y Parinacota',
            'Regi√≥n de Tarapac√°': 'Tarapac√°',
            'Regi√≥n de Antofagasta': 'Antofagasta',
            'Regi√≥n de Atacama': 'Atacama',
            'Regi√≥n de Coquimbo': 'Coquimbo',
            'Regi√≥n de Valpara√≠so': 'Valpara√≠so',
            'Regi√≥n Metropolitana de Santiago': 'RM',
            'Regi√≥n del Libertador General Bernardo O‚ÄôHiggins': 'O‚ÄôHiggins',
            'Regi√≥n del Maule': 'Maule',
            'Regi√≥n de √ëuble': '√ëuble',
            'Regi√≥n del Biob√≠o': 'Biob√≠o',
            'Regi√≥n de La Araucan√≠a': 'Araucan√≠a',
            'Regi√≥n de Los R√≠os': 'Los R√≠os',
            'Regi√≥n de Los Lagos': 'Los Lagos',
            'Regi√≥n de Ays√©n del Gral. Carlos Ib√°√±ez del Campo': 'Ays√©n',
            'Regi√≥n de Magallanes y de la Ant√°rtica Chilena': 'Magallanes'
        }
        return abreviaturas.get(nombre, nombre)

    regiones = [abreviar_region(fila[0]) for fila in resultados]
    modelos = [fila[1] for fila in resultados]
    cantidades = [fila[2] for fila in resultados]
    etiquetas = [f"{modelo} ({cant} ventas)" for modelo, cant in zip(modelos, cantidades)]

    # Gr√°fico
    plt.figure(figsize=(max(12, len(regiones)*0.9), 6))
    barras = plt.bar(regiones, cantidades, color='mediumseagreen')
    plt.xticks(rotation=30, fontsize=9, ha='right')
    plt.ylabel('Unidades vendidas')
    plt.title(f'Modelo m√°s vendido por Regi√≥n - {anio}')

    # Ajustar el espacio superior
    plt.ylim(0, max(cantidades) + 1.5)

    for barra, etiqueta in zip(barras, etiquetas):
        altura = barra.get_height()
        plt.text(barra.get_x() + barra.get_width()/2,
                 altura + 0.1,
                 etiqueta,
                 ha='center', va='bottom',
                 fontsize=8, rotation=0)

    plt.tight_layout()
    # Crear carpeta si no existe
    output_dir = "graficos"
    os.makedirs(output_dir, exist_ok=True)
    filename = f"{output_dir}/modelo_mas_vendido_por_region_{anio}.png"
    plt.savefig(filename)
    plt.show()
    plt.close()
    
    print(f"\nGr√°fico guardado como: {filename}")
    print("Guardando gr√°fico en:", os.path.abspath(output_dir))

    return resultados




def comparacion_compras_vs_ventas_por_region(conn, anio):
    query = """
    SELECT r.nombre_region,
           COALESCE(vc.vendidos, 0) AS autos_vendidos,
           COALESCE(cc.comprados, 0) AS autos_comprados
    FROM (
        SELECT id_region, COUNT(*) AS vendidos
        FROM analisis.hechos_ventas
        WHERE TO_CHAR(fecha_venta, 'YYYY') = %s
        GROUP BY id_region
    ) vc
    FULL OUTER JOIN (
        SELECT id_region, COUNT(*) AS comprados
        FROM analisis."Hechos_compras"
        WHERE TO_CHAR(fecha_compra, 'YYYY') = %s
        GROUP BY id_region
    ) cc ON vc.id_region = cc.id_region
    JOIN analisis.region r ON r.id_region = COALESCE(vc.id_region, cc.id_region)
    ORDER BY r.id_region;
    """
    with conn.cursor() as cursor:
        cursor.execute(query, (anio, anio))
        resultados = cursor.fetchall()

    if resultados:
        # Abreviar nombres de regiones
        def abreviar_region(nombre):
            abreviaturas = {
                'Regi√≥n de Arica y Parinacota': 'Arica y Parinacota',
                'Regi√≥n de Tarapac√°': 'Tarapac√°',
                'Regi√≥n de Antofagasta': 'Antofagasta',
                'Regi√≥n de Atacama': 'Atacama',
                'Regi√≥n de Coquimbo': 'Coquimbo',
                'Regi√≥n de Valpara√≠so': 'Valpara√≠so',
                'Regi√≥n Metropolitana de Santiago': 'RM',
                'Regi√≥n del Libertador General Bernardo O‚ÄôHiggins': 'O‚ÄôHiggins',
                'Regi√≥n del Maule': 'Maule',
                'Regi√≥n de √ëuble': '√ëuble',
                'Regi√≥n del Biob√≠o': 'Biob√≠o',
                'Regi√≥n de La Araucan√≠a': 'Araucan√≠a',
                'Regi√≥n de Los R√≠os': 'Los R√≠os',
                'Regi√≥n de Los Lagos': 'Los Lagos',
                'Regi√≥n de Ays√©n del Gral. Carlos Ib√°√±ez del Campo': 'Ays√©n',
                'Regi√≥n de Magallanes y de la Ant√°rtica Chilena': 'Magallanes'
            }
            return abreviaturas.get(nombre, nombre)

        regiones = [abreviar_region(r[0]) for r in resultados]
        vendidos = [r[1] for r in resultados]
        comprados = [r[2] for r in resultados]

        x = range(len(regiones))
        width = 0.35

        plt.figure(figsize=(max(12, len(regiones)*0.9), 6))
        plt.bar([i - width/2 for i in x], vendidos, width=width, label='Vendidos', color='steelblue')
        plt.bar([i + width/2 for i in x], comprados, width=width, label='Comprados', color='darkorange')

        plt.xticks(x, regiones, rotation=30, fontsize=9, ha='right')
        plt.title(f'Comparaci√≥n de autos comprados vs vendidos por regi√≥n - {anio}')
        plt.xlabel('Regi√≥n')
        plt.ylabel('Cantidad')
        plt.legend()
        plt.tight_layout()

        output_dir = "graficos"
        os.makedirs(output_dir, exist_ok=True)
        filename = f"{output_dir}/comparacion_compras_vs_ventas_por_region_{anio}.png"
        plt.savefig(filename)
        plt.show()
        plt.close()
        print(f"\nGr√°fico guardado como: {filename}")
        print("Guardando gr√°fico en:", os.path.abspath(output_dir))
    else:
        print("\nNo se encontraron resultados para ese a√±o.")

    return resultados


def promedio_precio_venta_por_marca(conn, anio):
    query = """
    SELECT m.marca,
           AVG(a.precio) AS promedio_precio_venta
    FROM analisis.hechos_ventas hv
    JOIN analisis.autos a ON hv.id_auto = a.patente
    JOIN analisis.modelos m ON hv.id_modelo = m.id_modelo
    WHERE TO_CHAR(hv.fecha_venta, 'YYYY') = %s
    GROUP BY m.marca
    ORDER BY promedio_precio_venta DESC;
    """
    with conn.cursor() as cursor:
        cursor.execute(query, (anio,))
        resultados = cursor.fetchall()

    # Mostrar resultados en consola with format
    for marca, promedio in resultados:
        print(f"{marca}: ${promedio:,.0f} CLP")

    if resultados:
        marcas = [r[0] for r in resultados]
        promedios = [r[1] for r in resultados]
        etiquetas = [f"${p:,.0f} CLP" for p in promedios]

        plt.figure(figsize=(12, 6))
        ax = sns.barplot(x=promedios, y=marcas, palette="coolwarm")

        plt.title(f'Promedio de precio de venta por marca - {anio}')
        plt.xlabel('Precio promedio (CLP)')
        plt.ylabel('Marca')

        # Ajustar l√≠mites del eje x
        max_valor = max(promedios)
        plt.xlim(0, max_valor * 1.1)

        # Formatear eje X en miles/millones con CLP
        ax.xaxis.set_major_formatter(FuncFormatter(lambda x, _: f"${x:,.0f}"))

        # A√±adir etiquetas de precio
        for i, (valor, etiqueta) in enumerate(zip(promedios, etiquetas)):
            ax.text(valor * 0.98, i, etiqueta,
                    va='center', ha='right', fontsize=9,
                    color='black', weight='bold')

        plt.tight_layout()

        output_dir = "graficos"
        os.makedirs(output_dir, exist_ok=True)
        filename = f"{output_dir}/promedio_precio_venta_pormarca{anio}.png"
        plt.savefig(filename)
        plt.show()
        plt.close()
        print(f"\nGr√°fico guardado como: {filename}")
        print("Guardando gr√°fico en:", os.path.abspath(output_dir))
    else:
        print("\nNo se encontraron resultados para ese a√±o.")

    return resultados

def diagnosticar_datos(conn):
    """Funci√≥n de diagn√≥stico para verificar qu√© datos est√°n disponibles en la base de datos"""
    print("\n" + "="*60)
    print("               DIAGN√ìSTICO DE DATOS")
    print("="*60)
    
    try:
        with conn.cursor() as cursor:
            # Verificar tabla hechos_ventas
            print("\nüîç VERIFICANDO TABLA hechos_ventas:")
            cursor.execute("SELECT COUNT(*) FROM analisis.hechos_ventas;")
            total_ventas = cursor.fetchone()[0]
            print(f"   Total de registros: {total_ventas}")
            
            if total_ventas > 0:
                cursor.execute("""
                    SELECT TO_CHAR(fecha_venta, 'YYYY') as a√±o, COUNT(*) as ventas
                    FROM analisis.hechos_ventas 
                    GROUP BY TO_CHAR(fecha_venta, 'YYYY')
                    ORDER BY a√±o;
                """)
                a√±os_ventas = cursor.fetchall()
                print("   Ventas por a√±o:")
                for a√±o, cantidad in a√±os_ventas:
                    print(f"     - {a√±o}: {cantidad} ventas")
                    
                cursor.execute("""
                    SELECT MIN(fecha_venta) as fecha_min, MAX(fecha_venta) as fecha_max
                    FROM analisis.hechos_ventas;
                """)
                fechas = cursor.fetchone()
                print(f"   Rango de fechas: {fechas[0]} a {fechas[1]}")
            
            # Verificar tabla modelos
            print("\nüîç VERIFICANDO TABLA modelos:")
            cursor.execute("SELECT COUNT(*) FROM analisis.modelos;")
            total_modelos = cursor.fetchone()[0]
            print(f"   Total de modelos: {total_modelos}")
            
            if total_modelos > 0:
                cursor.execute("SELECT nombre_modelo FROM analisis.modelos LIMIT 5;")
                algunos_modelos = cursor.fetchall()
                print("   Algunos modelos:")
                for modelo in algunos_modelos:
                    print(f"     - {modelo[0]}")
            
            # Verificar relaci√≥n ventas-modelos
            print("\nüîç VERIFICANDO RELACI√ìN ventas-modelos:")
            cursor.execute("""
                SELECT COUNT(DISTINCT hv.id_modelo) as modelos_vendidos,
                       COUNT(DISTINCT m.id_modelo) as modelos_totales
                FROM analisis.hechos_ventas hv
                FULL JOIN analisis.modelos m ON hv.id_modelo = m.id_modelo;
            """)
            relacion = cursor.fetchone()
            print(f"   Modelos que han tenido ventas: {relacion[0]}")
            print(f"   Total de modelos en cat√°logo: {relacion[1]}")
            
            # Verificar si hay problemas de JOIN
            cursor.execute("""
                SELECT COUNT(*) as ventas_sin_modelo
                FROM analisis.hechos_ventas hv
                LEFT JOIN analisis.modelos m ON hv.id_modelo = m.id_modelo
                WHERE m.id_modelo IS NULL;
            """)
            ventas_sin_modelo = cursor.fetchone()[0]
            if ventas_sin_modelo > 0:
                print(f"   ‚ö†Ô∏è  ADVERTENCIA: {ventas_sin_modelo} ventas sin modelo asociado")
            
    except Exception as e:
        print(f"‚ùå Error durante el diagn√≥stico: {e}")
    
    print("\n" + "="*60)

def main():
    parser = argparse.ArgumentParser(description="Consulta base de datos por a√±o")
    parser.add_argument("anio", help="A√±o para filtrar datos, formato YYYY")
    parser.add_argument("--diagnostico", "-d", action="store_true", 
                       help="Solo ejecutar diagn√≥stico de datos")
    args = parser.parse_args()
    
    try:
        conn = conectar()
        print(f"‚úÖ Conexi√≥n a la base de datos exitosa")
        
        # Si solo se quiere diagn√≥stico
        if args.diagnostico:
            diagnosticar_datos(conn)
            conn.close()
            return
        
        print(f"\n{'='*50}")
        print(f"  REPORTE DE AN√ÅLISIS DE VENTAS - {args.anio}")
        print(f"{'='*50}")
        
        # Ejecutar diagn√≥stico primero
        diagnosticar_datos(conn)
        
        # Ejecutar consultas
        print(f"\nüìä VENTAS POR MES para el a√±o {args.anio}:")
        ventas = ventas_por_mes(conn, args.anio)
        
        print(f"\nüí∞ COMPRAS, VENTAS Y DIFERENCIA para el a√±o {args.anio}:")
        datos = compras_ventas_diferencia(conn, args.anio)
        for anomes, monto_ventas, monto_compras, diferencia in datos:
            print(f"{anomes}: Ventas=${monto_ventas:,.0f}, Compras=${monto_compras:,.0f}, Diferencia=${diferencia:,.0f}")
        
        print(f"\nüèÜ TOP 10 MODELOS M√ÅS VENDIDOS en {args.anio}:")
        top_modelos = top_10_modelos_mas_vendidos(conn, args.anio)
        
        print(f"\nüó∫Ô∏è MODELO M√ÅS VENDIDO POR REGI√ìN en {args.anio}:")
        modelos_region = modelo_mas_vendido_por_region(conn, args.anio)
        for id_region, modelo, cantidad in modelos_region:
            print(f"Regi√≥n {id_region}: {modelo} ({cantidad} ventas)")
        
        print(f"\nüìà COMPARACI√ìN COMPRAS vs VENTAS POR REGI√ìN en {args.anio}:")
        comparacion = comparacion_compras_vs_ventas_por_region(conn, args.anio)
        for id_region, vendidos, comprados in comparacion:
            print(f"Regi√≥n {id_region}: Vendidos={vendidos}, Comprados={comprados}")
        
        print(f"\nüíµ PROMEDIO DE PRECIO DE VENTA POR MARCA en {args.anio}:")
        precios = promedio_precio_venta_por_marca(conn, args.anio)
        
        print(f"\n{'='*50}")
        print("‚úÖ An√°lisis completado exitosamente")
        print(f"üìÅ Los gr√°ficos se han guardado en la carpeta 'graficos'")
        print(f"{'='*50}")

    except psycopg2.Error as e:
        print(f"‚ùå Error de base de datos: {e}")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
    finally:
        try:
            conn.close()
        except:
            pass

    

if __name__ == "__main__":
    main()